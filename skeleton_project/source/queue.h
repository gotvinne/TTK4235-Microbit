#ifndef ORDER_QUEUE_LENGTH
#DEFINE ORDER_QUEUE_LENGTH = 4 
/**
 * @file 
 * @brief queue implementation
 */

/**
 * @brief int array of size 4, holds the sequence of events
 */ 
int p_order_queue[ORDER_QUEUE_LENGTH] = {-1,-1,-1,-1};

/**
 * @brief Holds every upcomming button orders
 * 
 * @warning Array size differs
 */ 
Order* p_buttom_queue;


/**
 * @brief deletes order from @p p_buttom_queue
 */
void queue_delete_order();


/**
 * @brief Puts correct order into @p p_order_queue
 */
void initialise_order();//uenig i dette - Gunnar 

/**
 * @brief deletes order from @p p_order_queue
 *  @warning frees allocated memory from array 
*/ 
void buttom_delete_order(); 

/**
 * @brief Initialize the button queue @c p_button_queue with 15 empty (-1) orders @c Order.
 *
 * @warning The @c Order's order type is default HARDWARE_ORDER_INSIDE
 */
void queue_initialize_empty_button_queue();


/**
 * @brief deletes all orders both from @p p_order_queue and @p p_buttom_queue 
 * @warning the function frees allokated memory
 */ 
void queue_clear_all_orders(); 

/**
 * @brief Insert the new order @p new_o  in @p p_buttom_queue chronological.
 *
 * @param[in] new_o A new order generated by the user_get_order() function in user.h 
 */ 
void queue_attach_order_to_queue(Order new_o);

/**
 * @brief sorts orders in @p p_order_queue depending on HardwareOrder
 */ 
void sort_order_queue(); 

/**
 * @brief Attaches an order @p o from the user in to the buttom_queue @p p_buttom_queue
 *
 * @param[in] o The order from the user
 * @param[in] p_b_q A pointer to the global buttom queue (should be p_buttom_queue)
 */
void queue_attach_order_to_button_queue(Order o, Order* p_b_q);

/**
 * @brief Removes the first order of the button queue
 */
void queue_remove_order_from_button_queue()

#endif
